
'use server';

import { collection, addDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import type { Recipe, Preparation } from '@/lib/types';
import type { RecipeConceptOutput } from '@/ai/flows/workshop-flow';

/**
 * Creates a new dish (recipe of type 'Plat' or 'Préparation') from a concept generated by the workshop AI.
 * It DOES NOT link ingredients or sub-recipes. It only creates the main dish data.
 * The linking process is now handled by the user on the recipe detail page.
 * @param concept - The dish concept generated by the AI.
 * @param collectionName - The name of the Firestore collection to save to ('recipes', 'preparations', or 'garnishes').
 * @returns The ID of the newly created document.
 */
export async function createDishFromWorkshop(concept: RecipeConceptOutput, collectionName: 'recipes' | 'preparations' | 'garnishes' = 'recipes'): Promise<string> {
    try {
        let docRef;
        let dataToSave: Omit<Recipe, 'id'> | Omit<Preparation, 'id'>;
        const rawConceptString = JSON.stringify(concept);

        if (concept.type === 'Plat') {
            dataToSave = {
                type: 'Plat',
                name: concept.name,
                description: concept.description,
                imageUrl: concept.imageUrl || null,
                procedure_fabrication: concept.procedure_fabrication || "",
                procedure_service: concept.procedure_service || "",
                difficulty: concept.difficulty,
                duration: concept.duration,
                portions: concept.portions || 1,
                commercialArgument: concept.commercialArgument,
                price: 0, // Default price, user will set it
                status: 'Inactif', // Always inactive by default
                category: concept.category || 'Plats et Grillades', // Default category
                tvaRate: 10, // Default TVA rate
                allergens: [],
                tags: [],
                mode_preparation: concept.mode_preparation || 'minute',
                rawConcept: rawConceptString,
            };
        } else { // Handles 'Préparation' and 'Garniture'
             dataToSave = {
                type: 'Préparation',
                name: concept.name,
                description: concept.description,
                category: concept.category as any || 'Accompagnements',
                difficulty: concept.difficulty,
                duration: concept.duration,
                procedure_fabrication: concept.procedure_fabrication || "",
                procedure_service: concept.procedure_service || "",
                portions: concept.portions,
                productionQuantity: concept.productionQuantity || 1,
                productionUnit: concept.productionUnit || 'kg',
                usageUnit: concept.usageUnit || 'g',
                tags: [],
                imageUrl: concept.imageUrl || null, 
                allergens: [],
                mode_preparation: concept.mode_preparation || 'avance',
                rawConcept: rawConceptString,
            };
        }
        
        const col = collection(db, collectionName);
        docRef = await addDoc(col, dataToSave);
        
        return docRef.id;

    } catch (error) {
        console.error("Error creating document from workshop:", error);
        if (error instanceof Error) {
            throw new Error(`Failed to create document: ${error.message}`);
        }
        throw new Error("An unknown error occurred while creating the document from the workshop concept.");
    }
}


/**
 * Creates a new, empty preparation from the workshop interface.
 * @param prepData - The partial data for the new preparation (name, description).
 * @returns The ID of the newly created document.
 */
export async function createPreparation(prepData: Partial<Preparation>, _id: string | null): Promise<string> {
    try {
        const dataToSave: Partial<Preparation> = {
            type: 'Préparation',
            name: prepData.name || 'Nouvelle Préparation',
            description: prepData.description || 'À compléter...',
            category: 'Sauces chaudes', // Default category, user can change it
            difficulty: 'Moyen',
            duration: 0,
            productionQuantity: 1,
            productionUnit: 'kg',
            usageUnit: 'g'
        };

        const docRef = await addDoc(collection(db, 'preparations'), dataToSave);
        return docRef.id;
    } catch (error) {
        console.error("Error creating preparation:", error);
        throw new Error("Failed to create preparation in database.");
    }
}
