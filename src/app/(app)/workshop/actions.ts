
'use server';

import { collection, addDoc, query, where, getDocs, writeBatch } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import type { Preparation, Recipe } from '@/lib/types';
import type { DishConceptOutput } from '@/ai/flows/workshop-flow';

/**
 * Creates a new dish (recipe of type 'Plat') from a concept generated by the workshop AI.
 * It also attempts to automatically link any suggested sub-recipes to existing preparations.
 * @param concept - The dish concept generated by the AI.
 * @returns The ID of the newly created dish.
 */
export async function createDishFromWorkshop(concept: DishConceptOutput): Promise<string> {
    try {
        const dishData: Omit<Recipe, 'id'> = {
            type: 'Plat',
            name: concept.name,
            description: concept.description,
            imageUrl: concept.imageUrl,
            procedure_preparation: concept.procedure_preparation,
            procedure_cuisson: concept.procedure_cuisson,
            procedure_service: concept.procedure_service,
            difficulty: concept.difficulty,
            duration: concept.duration,
            portions: concept.portions,
            commercialArgument: concept.commercialArgument,
            price: 0, 
            status: 'Inactif',
            category: 'Plats et Grillades',
            tvaRate: 10,
        };

        const recipesCol = collection(db, 'recipes');
        const recipeDocRef = await addDoc(recipesCol, dishData);
        const newDishId = recipeDocRef.id;

        // Now, try to link the sub-recipes
        if (concept.subRecipes && concept.subRecipes.length > 0) {
            const preparationsCol = collection(db, 'preparations');
            const batch = writeBatch(db);

            // Fetch all preparations that match the names suggested by the AI
            const q = query(preparationsCol, where('name', 'in', concept.subRecipes));
            const querySnapshot = await getDocs(q);
            
            const foundPreparations: Preparation[] = [];
            querySnapshot.forEach(doc => {
                foundPreparations.push({ id: doc.id, ...doc.data() } as Preparation);
            });

            // Create links for each found preparation
            foundPreparations.forEach(prep => {
                const linkRef = doc(collection(db, 'recipePreparationLinks'));
                batch.set(linkRef, {
                    parentRecipeId: newDishId,
                    childPreparationId: prep.id,
                    quantity: 1, // Default quantity, user must adjust
                    unitUse: prep.usageUnit || prep.productionUnit, // Default unit
                });
            });

            if (!querySnapshot.empty) {
                await batch.commit();
            }
        }
        
        return newDishId;

    } catch (error) {
        console.error("Error creating dish from workshop:", error);
        if (error instanceof Error) {
            throw new Error(`Failed to create dish: ${error.message}`);
        }
        throw new Error("An unknown error occurred while creating the dish from the workshop concept.");
    }
}
