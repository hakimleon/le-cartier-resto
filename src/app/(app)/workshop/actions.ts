
'use server';

import { collection, addDoc, doc, getDocs, writeBatch, query, where } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import type { Ingredient, Recipe, RecipeIngredientLink } from '@/lib/types';
import type { DishConceptOutput } from '@/ai/flows/workshop-flow';

/**
 * Creates a new dish (recipe of type 'Plat') from a concept generated by the workshop AI.
 * It also links existing ingredients to the newly created dish.
 * @param concept - The dish concept generated by the AI.
 * @returns The ID of the newly created dish.
 */
export async function createDishFromWorkshop(concept: DishConceptOutput): Promise<string> {
    try {
        // 1. Create the base recipe document with all available details from the AI
        const dishData: Omit<Recipe, 'id'> = {
            type: 'Plat',
            name: concept.name,
            description: concept.description,
            imageUrl: concept.imageUrl,
            procedure_preparation: concept.procedure_preparation,
            procedure_cuisson: concept.procedure_cuisson,
            procedure_service: concept.procedure_service,
            difficulty: concept.difficulty,
            duration: concept.duration,
            portions: concept.portions,
            commercialArgument: concept.commercialArgument,
            price: 0, // Default price, to be set manually
            status: 'Inactif', // Start as inactive
            category: 'Plats et Grillades', // Default category, can be changed
            tvaRate: 10, // Default TVA rate
        };

        const recipesCol = collection(db, 'recipes');
        const recipeDocRef = await addDoc(recipesCol, dishData);
        const newDishId = recipeDocRef.id;
        
        // 2. Fetch all existing ingredients from the database
        const ingredientsCol = collection(db, 'ingredients');
        const ingredientsSnapshot = await getDocs(ingredientsCol);
        const allIngredients = ingredientsSnapshot.docs.map(doc => ({ ...doc.data(), id: doc.id } as Ingredient));

        // 3. Create a batch to add all ingredient links
        const batch = writeBatch(db);
        const recipeIngredientsCol = collection(db, 'recipeIngredients');

        for (const ingredientName of concept.ingredients) {
            // Find an existing ingredient that matches the name (case-insensitive)
            const existingIngredient = allIngredients.find(dbIng => dbIng.name.toLowerCase() === ingredientName.toLowerCase());
            
            if (existingIngredient && existingIngredient.id) {
                // If a match is found, create a link
                const linkRef = doc(recipeIngredientsCol);
                const newLink: Omit<RecipeIngredientLink, 'id'> = {
                    recipeId: newDishId,
                    ingredientId: existingIngredient.id,
                    quantity: 0, // Default quantity to 0, to be filled in by the user
                    unitUse: 'g', // Default unit
                };
                batch.set(linkRef, newLink);
            }
            // If no match is found, we simply ignore it. The user can add it manually.
        }

        // 4. Commit the batch to save all the links
        await batch.commit();

        return newDishId;

    } catch (error) {
        console.error("Error creating dish from workshop:", error);
        if (error instanceof Error) {
            throw new Error(`Failed to create dish: ${error.message}`);
        }
        throw new Error("An unknown error occurred while creating the dish from the workshop concept.");
    }
}
