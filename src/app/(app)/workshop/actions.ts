
'use server';

import { collection, addDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import type { Recipe, Preparation } from '@/lib/types';
import type { DishConceptOutput } from '@/ai/flows/workshop-flow';

/**
 * Creates a new dish (recipe of type 'Plat') from a concept generated by the workshop AI.
 * It DOES NOT link ingredients or sub-recipes. It only creates the main dish data.
 * The linking process is now handled by the user on the recipe detail page.
 * @param concept - The dish concept generated by the AI.
 * @returns The ID of the newly created dish.
 */
export async function createDishFromWorkshop(concept: DishConceptOutput): Promise<string> {
    try {
        const dishData: Omit<Recipe, 'id'> = {
            type: 'Plat',
            name: concept.name,
            description: concept.description,
            imageUrl: concept.imageUrl,
            procedure_preparation: concept.procedure_preparation,
            procedure_cuisson: concept.procedure_cuisson,
            procedure_service: concept.procedure_service,
            difficulty: concept.difficulty,
            duration: concept.duration,
            portions: concept.portions,
            commercialArgument: concept.commercialArgument,
            price: 0, 
            status: 'Inactif',
            category: 'Plats et Grillades', // Default category, user can change later
            tvaRate: 10, // Default TVA rate
            // Les allergènes et les tags peuvent être ajoutés plus tard
        };

        const recipesCol = collection(db, 'recipes');
        const recipeDocRef = await addDoc(recipesCol, dishData);
        
        return recipeDocRef.id;

    } catch (error) {
        console.error("Error creating dish from workshop:", error);
        if (error instanceof Error) {
            throw new Error(`Failed to create dish: ${error.message}`);
        }
        throw new Error("An unknown error occurred while creating the dish from the workshop concept.");
    }
}

/**
 * Creates a new preparation (recipe of type 'Préparation') from the workshop.
 * @param prepData - The preparation data (name, description).
 * @returns The ID of the newly created preparation.
 */
export async function createPreparation(prepData: Partial<Omit<Preparation, 'id'>>): Promise<string> {
     try {
        // We set default values for fields not provided by the initial creation step.
        const dataToSave: Omit<Preparation, 'id'> = {
            type: 'Préparation',
            name: prepData.name || 'Nouvelle Préparation',
            description: prepData.description || '',
            difficulty: 'Moyen',
            duration: 10,
            productionQuantity: 1,
            productionUnit: 'kg',
            usageUnit: 'g',
            procedure_preparation: '',
            procedure_cuisson: '',
            procedure_service: '',
        };
        
        const prepsCol = collection(db, 'preparations');
        const prepDocRef = await addDoc(prepsCol, dataToSave);
        
        return prepDocRef.id;

    } catch (error) {
        console.error("Error creating preparation:", error);
        if (error instanceof Error) {
            throw new Error(`Failed to create preparation: ${error.message}`);
        }
        throw new Error("An unknown error occurred while creating the preparation.");
    }
}
